// hooks/useEntryActions.ts - Version v√©rifi√©e et optimis√©e
import { useCallback } from "react";
import { Share } from "react-native";
import MurmureStorage, { MurmureEntry, StorageResult } from "@/app/lib/storage";
import { useErrorHandler } from "./useErrorHandler";

export interface UseEntryActionsProps {
  onDataChanged?: () => void;
  onCurrentEntryChanged?: (entry: MurmureEntry | null) => void;
}

export const useEntryActions = ({
  onDataChanged,
  onCurrentEntryChanged,
}: UseEntryActionsProps = {}) => {
  const { withErrorHandling } = useErrorHandler();

  // ‚úÖ ACTIONS TECHNIQUES PURES - AUCUNE CONFIRMATION (g√©r√©es dans l'UI)

  /**
   * D√©place une entr√©e vers la corbeille
   * Action technique pure sans confirmation
   */
  const moveToTrash = useCallback(
    async (entry: MurmureEntry): Promise<boolean> => {
      try {
        console.log(
          "üóëÔ∏è [useEntryActions] D√©but d√©placement vers corbeille:",
          entry.id
        );

        const result = await MurmureStorage.moveToTrash(entry.id);

        if (result.success) {
          console.log("‚úÖ [useEntryActions] D√©placement r√©ussi");
          onDataChanged?.();
          return true;
        } else {
          console.error(
            "‚ùå [useEntryActions] √âchec d√©placement:",
            result.error
          );
          return false;
        }
      } catch (error) {
        console.error(
          "‚ùå [useEntryActions] Exception lors du d√©placement:",
          error
        );
        return false;
      }
    },
    [onDataChanged]
  );

  /**
   * Restaure une entr√©e depuis la corbeille
   * Action technique pure sans confirmation
   */
  const restoreFromTrash = useCallback(
    async (entry: MurmureEntry): Promise<boolean> => {
      try {
        console.log("‚ôªÔ∏è [useEntryActions] D√©but restauration:", entry.id);

        const result = await MurmureStorage.restoreFromTrash(entry.id);

        if (result.success) {
          console.log("‚úÖ [useEntryActions] Restauration r√©ussie");
          onDataChanged?.();
          return true;
        } else {
          console.error(
            "‚ùå [useEntryActions] √âchec restauration:",
            result.error
          );
          return false;
        }
      } catch (error) {
        console.error(
          "‚ùå [useEntryActions] Exception lors de la restauration:",
          error
        );
        return false;
      }
    },
    [onDataChanged]
  );

  /**
   * Supprime d√©finitivement une entr√©e
   * Action technique pure sans confirmation
   */
  const deletePermanently = useCallback(
    async (entry: MurmureEntry): Promise<boolean> => {
      try {
        console.log(
          "üíÄ [useEntryActions] D√©but suppression d√©finitive:",
          entry.id
        );

        const result = await MurmureStorage.deleteEntryPermanently(entry.id);

        if (result.success) {
          console.log("‚úÖ [useEntryActions] Suppression d√©finitive r√©ussie");
          onDataChanged?.();
          return true;
        } else {
          console.error(
            "‚ùå [useEntryActions] √âchec suppression d√©finitive:",
            result.error
          );
          return false;
        }
      } catch (error) {
        console.error(
          "‚ùå [useEntryActions] Exception lors de la suppression d√©finitive:",
          error
        );
        return false;
      }
    },
    [onDataChanged]
  );

  /**
   * Vide compl√®tement la corbeille
   * Action technique pure sans confirmation
   */
  const emptyTrash = useCallback(
    async (trashEntries: MurmureEntry[]): Promise<boolean> => {
      try {
        if (trashEntries.length === 0) {
          console.log("üì≠ [useEntryActions] Corbeille d√©j√† vide");
          return false;
        }

        console.log(
          "üßπ [useEntryActions] D√©but vidage corbeille:",
          trashEntries.length,
          "entr√©es"
        );

        const result = await MurmureStorage.emptyTrash();

        if (result.success) {
          console.log("‚úÖ [useEntryActions] Vidage corbeille r√©ussi");
          onDataChanged?.();
          return true;
        } else {
          console.error(
            "‚ùå [useEntryActions] √âchec vidage corbeille:",
            result.error
          );
          return false;
        }
      } catch (error) {
        console.error("‚ùå [useEntryActions] Exception lors du vidage:", error);
        return false;
      }
    },
    [onDataChanged]
  );

  /**
   * Partage une entr√©e via les options de partage du syst√®me
   * Action sans confirmation (imm√©diate)
   */
  const shareEntry = useCallback(
    async (entry: MurmureEntry): Promise<boolean> => {
      try {
        console.log("üì§ [useEntryActions] D√©but partage:", entry.id);

        await Share.share({
          message: `${entry.content}\n\n‚Äî √âcrit avec Murmure üåô`,
          title: `Session du ${entry.date}`,
        });

        console.log("‚úÖ [useEntryActions] Partage r√©ussi");
        return true;
      } catch (error) {
        console.error("‚ùå [useEntryActions] Erreur partage:", error);
        return false;
      }
    },
    []
  );

  /**
   * Charge une entr√©e existante en sauvegardant l'actuelle si n√©cessaire
   * Action avec sauvegarde automatique
   */
  const loadEntry = useCallback(
    async (
      entry: MurmureEntry,
      currentEntry: MurmureEntry | null,
      currentText: string,
      saveCurrentFn?: () => Promise<StorageResult>
    ): Promise<boolean> => {
      try {
        console.log("üìÇ [useEntryActions] Chargement de l'entr√©e:", entry.id);

        // ‚úÖ Sauvegarde automatique si n√©cessaire
        if (
          currentEntry &&
          currentText.trim() &&
          currentText !== currentEntry.content &&
          saveCurrentFn
        ) {
          console.log("üíæ [useEntryActions] Sauvegarde avant chargement");
          const result = await saveCurrentFn();
          if (!result.success) {
            console.warn(
              "‚ö†Ô∏è [useEntryActions] √âchec sauvegarde avant chargement:",
              result.error
            );
          }
        }

        // Changer l'entr√©e courante
        onCurrentEntryChanged?.(entry);

        // Sauvegarder l'ID de l'entr√©e courante
        const saveIdResult = await MurmureStorage.saveCurrentEntryId(entry.id);
        if (!saveIdResult.success) {
          console.warn(
            "‚ö†Ô∏è [useEntryActions] √âchec sauvegarde ID:",
            saveIdResult.error
          );
        }

        console.log("‚úÖ [useEntryActions] Entr√©e charg√©e avec succ√®s");
        return true;
      } catch (error) {
        console.error("‚ùå [useEntryActions] Erreur chargement entr√©e:", error);
        return false;
      }
    },
    [onCurrentEntryChanged]
  );

  /**
   * Cr√©e une nouvelle entr√©e en sauvegardant l'actuelle si n√©cessaire
   * Action avec sauvegarde automatique
   */
  const createNewEntry = useCallback(
    async (
      currentEntry: MurmureEntry | null,
      currentText: string,
      saveCurrentFn?: () => Promise<StorageResult>
    ): Promise<MurmureEntry | null> => {
      try {
        console.log("üÜï [useEntryActions] Cr√©ation d'une nouvelle entr√©e...");

        // ‚úÖ Sauvegarde automatique si n√©cessaire
        if (currentEntry && currentText.trim() && saveCurrentFn) {
          console.log(
            "üíæ [useEntryActions] Sauvegarde avant cr√©ation nouvelle entr√©e"
          );
          const result = await saveCurrentFn();
          if (!result.success) {
            console.warn(
              "‚ö†Ô∏è [useEntryActions] √âchec sauvegarde avant nouvelle entr√©e:",
              result.error
            );
          }
        }

        // Cr√©er la nouvelle entr√©e
        const result = await withErrorHandling(
          () => MurmureStorage.startNewSession(),
          "cr√©ation nouvelle entr√©e"
        );

        if (result) {
          console.log("‚úÖ [useEntryActions] Nouvelle entr√©e cr√©√©e:", result.id);
          onCurrentEntryChanged?.(result);
          onDataChanged?.();
          return result;
        }

        console.error("‚ùå [useEntryActions] √âchec cr√©ation nouvelle entr√©e");
        return null;
      } catch (error) {
        console.error(
          "‚ùå [useEntryActions] Exception lors de la cr√©ation:",
          error
        );
        return null;
      }
    },
    [withErrorHandling, onCurrentEntryChanged, onDataChanged]
  );

  /**
   * Obtient le nombre de jours restants avant suppression d√©finitive
   * Fonction utilitaire pure
   */
  const getDaysUntilDeletion = useCallback(
    (entry: MurmureEntry): number | null => {
      return MurmureStorage.getDaysUntilDeletion(entry);
    },
    []
  );

  return {
    // ‚úÖ Actions principales - AUCUNE CONFIRMATION (g√©r√©es dans l'UI)
    moveToTrash,
    restoreFromTrash,
    deletePermanently,
    emptyTrash,

    // ‚úÖ Actions sans confirmation
    shareEntry,
    loadEntry,
    createNewEntry,

    // ‚úÖ Utilitaires
    getDaysUntilDeletion,
  };
};
